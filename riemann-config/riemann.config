; -*- mode: clojure; -*-
; vim: filetype=clojure

(use 'riemann.influxdb)
(require '[clj-http.client :as http])

(def influxdb-creds {
     :version :0.9
     :host "192.168.99.100" ; OSX (docker-machine)
     ;:host "127.0.0.1"     ; Linux (native)                     
     :port 8086
     :scheme "http"
     :db "db"
})

;
; tweaked influxdb-9 func - allows finer precision (milliseconds)                                         ;
;
(defn influxdb-9-fix
  [opts]
  (let [write-url
        (str (cond->
          (format "%s://%s:%s/write?db=%s&precision=ms" (:scheme opts) (:host opts) (:port opts) (:db opts))
          (:retention opts)
            (str "&rp=" (:retention opts))))

        http-opts
        (cond->
          {:socket-timeout (:timeout opts 5000) ; ms
           :conn-timeout   (:timeout opts 5000) ; ms
           :content-type   "text/plain"
           :insecure? (:insecure opts false)}
          (:username opts)
            (assoc :basic-auth [(:username opts)
                                (:password opts)]))

        tag-fields
        (:tag-fields opts #{:host})]
    (fn stream
      [events]
      (let [events (if (sequential? events) events (list events))
            points (events->points-9 tag-fields events)]
        (http/post write-url
          (assoc http-opts :body (->> points
            (map lineprotocol-encode-9)
            (clojure.string/join "\n"))))))))


(def influx-sender
         (async-queue! :agg {:queue-size 10000
                             :core-pool-size 20
                             :max-pool-size 20
                             :keep-alive-time 60000}
                       (influxdb-9-fix influxdb-creds))) 

; Listen on the local interface over TCP (5555), UDP (5555), websockets (5556), REPL (5557)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (repl-server {:host host})
  )

(let [index (index)]
  (streams
   (where (service #"event_XYZ_latencies")
    (by [:correlation_id :state]
        (fixed-event-window 2
          (smap (fn [events]
              (let [fst (nth events 0)
                    lst (nth events 1)
                    dif (Math/abs (-  (:metric fst) (:metric lst)))]
               (event {:service (:service lst) :host (:host lst) :state (:state lst) :metric dif :time (:metric lst)})))
                influx-sender)
          ))))
  )  
